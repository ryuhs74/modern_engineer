캡술화(Encapsulation)
	표현하려는 자료와 동작을 하나의 단위로 묶어 객체를 정의한다.
	대상의 특징을 나타내는 데이터와 동작을 처리하는 함수가 하나의 묶음이 되어 독립적인 부품이 된다.
	재사용성이 높아 객체를 소프트웨어 IC라고 부른다.

정보은폐(information Hiding)
	객체는 외부에서 사용하는 기능만 공개하고 내부적인 동작은 숨겨 스스로 방어한다.
	외부에서 객체의 상태를 함부로 바꿀 수 없어 안정성이 향상된다.

추상화(Abstraction)
	현실의 사물을 객체로 정의하기 위해 특성과 동작을 조사하는 것을 데이터 모델링 또는 개념화라고 한다.
	모델링에 의해 속성과 동작의 목록을 작성하고 공개할 기능과 숨길 기능을 결정하여 객체로 정의한다.
	외부에서는 복잡한 내부를 볼 수 없고 공개된 소소의 인터페이스만 볼 수 있어 사용법이 간단하며 객체를 수정하기도 용이하다.

상속(Inheritance)
	이미 만들어지 클래스를 파생시켜 새로운 클래스를 정의한다. 파생 클래스는 기존 클래스의 모든 속성과
	동작을 물려 받으며 새로운 기능을 추가하거나 변경할 수도 있다. 
	현식의 문제가 특수해서 기존 클래스가 적합하지 않을 경우 상속 받아 추가, 수정한다.

다형성(Polymorphism)
	똑같은 호출이라도 상황에 따라, 호출하는 객체에 따라 다른 동작을 할 수 있는 능력이다. 실제 내부 구현은 다르더라도 
	개년적으로 동일한 동작을 하는 함수를 하나의 인터페이스로 일관되게 호출할 수 있다.

